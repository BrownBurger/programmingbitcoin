= Programming Bitcoin
:imagesdir: images

[[chapter_networking]]
== Networking

[.lead]
The peer-to-peer network that Bitcoin runs on is what gives it a lot of its robustness. 65000+ nodes are running on the network as of this writing and communicate constantly.

The Bitcoin network is a broadcast network or a gossip network. Every node is announcing different transactions, blocks and peers that it knows about. The protocol is rich and has a lot of features that have been added to it over the years.

One nice thing about the networking protocol is that it is not consensus critical. The same data can be sent from one node to another in some other fashion and the blockchain itself would not be affected.

With that in mind, we'll work toward being able to parse the very first message that one node sends to another, the version message.

=== Network Messages

Network messages have a particular form that looks like this

.Network Message or the Envelope that contains the actual payload
image::network1.png[Network Message]

The first four bytes are always the same and are referred to as the *network magic*. Magic bytes are common in network programming as the communication can be spotty and asynchronous. Magic bytes give the receiver a place to start should the communication get interrupted (say by getting disconnected from your ISP). Magic bytes are also useful to make sure the node is on the right network. You would not want a Bitcoin node to connect to a Litecoin node, for example. Thus, a Litecoin node has a different magic. Bitcoin testnet also has a different magic `0b110907` as opposed to the Bitcoin mainnet magic `f9beb4d9` above.

The next 12 bytes define the command, or what the payload actually carries. There are many different payloads, many of which can be seen at https://wiki.bitcoin.it. Note that the command is meant to be human-readable and in fact this message is "version" in ascii with 0-byte padding.

The next 4 bytes determine the length of the payload. As we saw in the transaction and block parsing sections, this is necessary as the payload is of variable length. As 2^32^ is about 4 billion, we can have payloads that can be as big as 4 GB, though the reference client rejects any payloads over 32MB. Note the number is interpreted in Little-Endian, so in our case here, `0x00000065` is 101 bytes.

The next 4 bytes are the checksum. The checksum algorithm is something of an odd choice as it's the first 4 bytes of the hash256 of the payload. I say odd, as normally, networking protocol checksums generally are designed to have error-correcting capability and hash256 has none. That said, hash256 is common in the rest of the Bitcoin protocol and is thus used here.

The code to handle network messages requires us to create a new class:

[source,python]
----
NETWORK_MAGIC = b'\xf9\xbe\xb4\xd9'
TESTNET_NETWORK_MAGIC = b'\x0b\x11\x09\x07'

class NetworkEnvelope:

    def __init__(self, command, payload, testnet=False):
        self.command = command
        self.payload = payload
	if testnet:
	    self.magic = TESTNET_NETWORK_MAGIC
	else:
	    self.magic = NETWORK_MAGIC

    def __repr__(self):
        return '{}: {}'.format(
            self.command.decode('ascii'),
            self.payload.hex(),
        )
----

==== Exercise {counter:exercise}

Determine what this network message is:

`f9beb4d976657261636b000000000000000000005df6e0e2`

==== Exercise {counter:exercise}

Write the `parse` and `serialize` methods for `NetworkEnvelope`.

=== Parsing the payload

Each command has a separate payload specification. Here is the one for Version:

.Parsed Version
image::network2.png[Version Message]

The fields for Version are meant to give enough information for two nodes to be able to communicate.

The first field is the network protocol version, which specifies the what messages may be communicated. The service field give information about what capabilities are available to connecting nodes. The timestamp field is 8 bytes (as opposed to 4 bytes in the block header) and is the unix timestamp in little endian.

IP addresses can be IPv6, IPv4 or OnionCat (a mapping of TOR's `.onion` addresses to IPv6). If IPv4, the first 12 bytes are `00000000000000000000ffff` and the last 4 bytes are the IP. The port is 2 bytes (default is 8333, which maps to `208d` in Little-Endian hex) and in Little-Endian.

Nonce is a number used only once for reply messages. User Agent identifies the software being run. The height or latest block field helps the other node know which block a node is synced up to.

Relay is used for Bloom Filters, which we'll get to in Chapter 12.

Setting some reasonable defaults, our VersionMessage class looks like this:

[source,python]
----
class VersionMessage:
    command = b'version'

    def __init__(
            self,
            version=70015,
            services=0,
            timestamp=None,
            receiver_services=0,
            receiver_ip=b'\x00\x00\x00\x00',
            receiver_port=8333,
            sender_services=0,
            sender_ip=b'\x00\x00\x00\x00',
            sender_port=8333,
            nonce=None,
            user_agent=b'/programming-bitcoin:0.1/',
            latest_block=0,
            relay=True,
    ):
        self.version = version
        self.services = services
        if timestamp is None:
            self.timestamp = int(time.time())
        else:
            self.timestamp = timestamp
        self.receiver_services = receiver_services
        self.receiver_ip = receiver_ip
        self.receiver_port = receiver_port
        self.sender_services = sender_services
        self.sender_ip = sender_ip
        self.sender_port = sender_port
        if nonce is None:
            self.nonce = int_to_little_endian(randint(0, 2**64), 8)
        else:
            self.nonce = nonce
        self.user_agent = user_agent
        self.latest_block = latest_block
        self.relay = relay
----

At this point, we need a way to serialize this message.

==== Exercise {counter:exercise}

Write the `serialize` method for `VersionMessage`.

=== Network handshake

The network handshake for two nodes is how node communication is established. It goes something like this:

 * A wants to connect to B and sends the Version message.
 * B receives the Version message and responds with the Verack message and sends its own Version message.
 * A receives the Version and Verack messages and sends back a Verack message
 * B receives the Verack message and continues communication

Once the handshake is finished, A and B can communicate however they want. Note that there is no authentication here and it's up to the nodes to verify all data that come in themselves. If a node sends a bad tx or block, it can expect to get banned or disconnected.

=== Connecting to the network

Network communication is tricky due to its asynchronous nature. To experiment, we can establish a connection to a random node on the network synchronously.

[source,python]
----
>>> import socket
>>> from network import NetworkEnvelope, VersionMessage
>>> host = 'tbtc.programmingblockchain.com'  # <1>
>>> port = 18333
>>> socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
>>> socket.connect((host, port))
>>> stream = socket.makefile('rb', None)  # <2>
>>> version_message = VersionMessage()  # <3>
>>> envelope = NetworkEnvelope(b'version', version_message.serialize(), testnet=True)
>>> socket.sendall(envelope.serialize())  # <4>
>>> while True:
...     new_message = NetworkEnvelope.parse(stream)  # <5>
...     print(new_message)
----
<1> This is a server I've set up for testnet. The testnet port is 18333 by default.
<2> We create a stream to be able to read from the socket in the usual way. A stream made this way can be passed to all the parse methods.
<3> The first step of the handshake is to send a version message.
<4> We now send the message in the right envelope.
<5> This line will read any messages coming in through our connected socket.

Connecting in this way, we can't send until we've received and can't respond intelligently to more than 1 message at a time. A more robust implementation would use an asynchronous library (like `asyncio` in Python 3) to allow be able to send and receive without hanging.

We also need a Verack message class which we'll create here:

[source,python]
----
class VerAckMessage:
    command = b'verack'

    def __init__(self):
        pass

    @classmethod
    def parse(cls, s):
        return cls()

    def serialize(self):
        return b''
----

Note this is the minimum to create a network message.

Let's now automate this by creating a class that will handle a lot of the sending and receiving for us.

[source,python]
----
class SimpleNode:
    
    def __init__(self, host, port=None, testnet=False, logging=False):
        if port is None:
            if testnet:
                port = 18333
            else:
                port = 8333
        self.testnet= testnet
        self.logging = logging
        # connect to socket
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.connect((host, port))
        # create a stream that we can use with the rest of the library
        self.stream = self.socket.makefile('rb', None)
        
    def send(self, message):  # <1>
        '''Send a message to the connected node'''
        # create a network envelope
        envelope = NetworkEnvelope(
            message.command, message.serialize(), testnet=self.testnet)
        if self.logging:
            print('sending: {}'.format(envelope))
        # send the serialized envelope over the socket using sendall
        self.socket.sendall(envelope.serialize())
        
    def read(self):  # <2>
        '''Read a message from the socket'''
        envelope = NetworkEnvelope.parse(self.stream, testnet=self.testnet)
        if self.logging:
            print('receiving: {}'.format(envelope))
        return envelope

    def wait_for(self, *message_classes):  # <3>
        '''Wait for one of the messages in the list'''
        # initialize the command we have, which should be None
        command = None
        command_to_class = {m.command: m for m in message_classes}
        # loop until the command is in the commands we want
        while command not in command_to_class.keys():
            # get the next network message
            envelope = self.read()
            # set the command to be evaluated
            command = envelope.command
            # we know how to respond to version and ping, handle that here
            if command == VersionMessage.command:
                # send verack
                self.send(VerAckMessage())
            elif command == PingMessage.command:
                # send pong
                self.send(PongMessage(envelope.payload))
        # return the envelope parsed as a member of the right message class
        return command_to_class[command].parse(envelope.stream())
----
<1> The `send` method sends a message over the socket. The `command` property and `serialize` methods are expected to exist in the `message` object.
<2> The `read` method reads a new message from the socket. This method could potentially detect the message and route to the right parser and send back not the envelope but the correctly parsed expected object.
<3> The `wait_for` method lets us wait for any one of several commands (specifically, message classes). This allows us to treat the socket connection a bit more synchronously and makes for a bit easier programming. A commercial strength node would definitely not use something like this.

Now that we have a node, we can now handshake with another node.

[source,python]
----
>>> from network import SimpleNode, VersionMessage
>>> node = SimpleNode('tbtc.programmingblockchain.com', testnet=True)
>>> version = VersionMessage()  # <1>
>>> node.send(version)  # <2>
>>> verack_received = False
>>> version_received = False
>>> while not verack_received and not version_received:  # <3>
...     message = node.wait_for(VersionMessage, VerAckMessage)  # <4>
...     if message.command == VerAckMessage.command:
...         verack_received = True
...     else:
...         version_received = True
...         node.send(VerAckMessage())
...
----
<1> It turns out most nodes don't care about the fields like IP address and port number all that much. We can connect with the defaults and everything will be just fine.
<2> We start the handshake by sending the Version message
<3> We only finish when we've received both Verack and Version.
<4> We expect to receive a Verack for our Version and the other node's Version. We don't know which order, though.

==== Exercise {counter:exercise}

Write the `handshake` method for `SimpleNode`

=== Getting Block Headers

Now that we can connect to a node, what can we do? When any node first connects to the network, the data that's most crucial to get and verify are the block headers. For full nodes, downloading the Block headers allows us to asynchronously ask for various blocks. For light clients, downloading headers allows us to verify the proof-of-work in each block and give us an idea of which chain has the most proof-of-work. As we'll see in Chapter 11, light clients will be able to get proofs-of-inclusion through the network using the block headers alone.

Nodes can give us the block headers without taking up too much bandwidth. The command to get the block headers is called `getheaders` and it looks like this:

.Parsed `getheaders`
image::getheaders.png[GetHeaders payload]

As with Version, we start with the protocol version, then the number of hashes in this list, then the starting block header and lastly, the ending block header. If we specify the ending block to be `000...000`, we're indicating that we want as many as the other node will give us. The maximum number of headers that we can get back is 2000, or almost a single difficulty adjustment period (2016 blocks).

Here's what the class looks like:

[source,python]
----

class GetHeadersMessage:
    command = b'getheaders'
    
    def __init__(self, version=70015, num_hashes=1, start_block=None, end_block=None):
        self.version = version
        self.num_hashes = num_hashes  # <1>
        if start_block is None:  # <2>
            raise RuntimeError('a starting block is required')
        self.start_block = start_block
        if end_block is None:
            self.end_block = b'\x00' * 32  # <3>
        else:
            self.end_block = end_block

----
<1> For the purposes of this chapter, we're going to assume that the number of hashes we'll get is 1. A more robust implementation would handle more than a single hash, but we can download the block headers using a single hash.
<2> A starting block is needed, otherwise we can't create a proper message.
<3> The ending block we assume to be null, or as many as the server will send to us if not defined.

==== Exercise {counter:exercise}

Write the `serialize` method for `GetHeadersMessage`.

=== Headers response

At this point, we can now create a node, handshake, and then ask for some headers.

[source,python]
----
>>> from network import SimpleNode, GetHeadersMessage
>>> from block import GENESIS_BLOCK_HASH
>>> node = SimpleNode('btc.programmingblockchain.com', testnet=True)
>>> node.handshake()
>>> getheaders = GetHeadersMessage(start_block=GENESIS_BLOCK_HASH)
>>> node.send(getheaders)
----

Now we need a way to receive the actual headers from our connected node. The other node will send back the `headers` command. The nice thing about the headers command is that it's a bunch of block headers which we already learned how to parse from Chapter 9. The actual HeadersMessage class can take advantage. The message looks like this:

.Parsed `headers`
image::headers.png[headers payload]

The message starts with the number of headers as a varint. We can have up to 2000 come back, so this is important. Each block header, we know, is 80 bytes. We have the number of transactions, or 0 in this case. The number of transactions is always 0. This may be a bit confusing at first since we only asked for the headers and not the transactions. The reason nodes bother sending the number of transactions at all is because this is meant to be compatible with the format for a full block, which is the block header, number of transactions and then the transactions themselves. By specifying that the number of transactions is 0, we can use the same parsing engine as when parsing a full block.

We can proceed to the actual parsing.

[source,python]
----
class HeadersMessage:
    command = b'headers'
    
    def __init__(self, blocks):
        self.blocks = blocks
        
    @classmethod
    def parse(cls, stream):
        num_headers = read_varint(stream)
        blocks = []
        for _ in range(num_headers):
            blocks.append(Block.parse(stream))  # <1>
            num_txs = read_varint(stream)  # <2>
            if num_txs != 0:  # <3>
                raise RuntimeError('number of txs not 0')
        return cls(blocks)
----
<1> Each block gets parsed using the `Block` class's `parse` method using the same stream that we have.
<2> The number of transactions is always 0 and is a remnant of block parsing.
<3> If we didn't get 0, something is wrong.

We can now do something useful with the network connection that we've set up. We can download the headers, check their proof-of-work and validate the block header difficulty adjustments.

[source,python]
----
>>> from network import SimpleNode, GetHeadersMessage, HeadersMessage
>>> from block import GENESIS_BLOCK_HASH
>>> from helper import calculate_new_bits
>>> node = SimpleNode('btc.programmingblockchain.com', testnet=False)
>>> node.handshake()
>>> last_block_hash = GENESIS_BLOCK_HASH
>>> first_epoch_block = None
>>> expected_bits = None
>>> count = 1
>>> while True:
...     getheaders = GetHeadersMessage(start_block=last_block_hash)
...     node.send(getheaders)
...     headers = node.wait_for(HeadersMessage)
...     for b in headers.blocks:
...         if not b.check_pow():  # <1>
...             raise RuntimeError('bad proof of work at block {}'.format(count))
...         if last_block_hash != GENESIS_BLOCK_HASH and b.prev_block != last_block_hash:  # <2>
...             raise RuntimeError('discontinuous block at {}'.format(count))
...         if expected_bits and b.bits != expected_bits:  # <3>
...             raise RuntimeError('bad bits at block {} {} vs {}'.format(count, b.bits.hex(), expected_bits.hex()))
...         if first_epoch_block and count % 2016 == 2015:  # <4>
...             expected_bits = calculate_new_bits(
...                 expected_bits, b.timestamp - first_epoch_block.timestamp)
...             print(expected_bits.hex())
...         elif first_epoch_block is None:  # <5>
...             expected_bits = b.bits
...         if count % 2016 == 0 or not first_epoch_block:  # <6>
...             first_epoch_block = b
...         count += 1
...         last_block_hash = b.hash()
...     if len(headers_message.blocks) < 2000:
...         break
----
<1> We are checking the proof-of-work being correct
<2> We are checking that the current block is following the previous one we checked
<3> We are checking that the bits/target/difficulty is what should be in our current epoch
<4> At the end of the epoch, we calculate the next bits/target/difficulty
<5> We need to store the first block of the epoch to calculate bits at the end of the epoch

Note that this won't work on testnet as the difficulty adjustment algorithm is different. To make sure blocks can proceed for testing, if a block hasn't been found on testnet in 20 minutes, the difficulty drops to 1, making it very easy to find a block. This is on purpose as to allow testers to be able to progress the network without expensive mining equipment. A $30 USB ASIC can typically find a few blocks per minute at the minimum difficulty.

=== Conclusion

We've managed to connect to a node on the network, handshake and do something useful, which is download and verify that the block headers meet the consensus rules. In the next chapter, we focus on getting information about transactions that we're interested in from another node in a private, yet provable way.